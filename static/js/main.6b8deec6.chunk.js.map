{"version":3,"sources":["images/logo.png","components/Form.js","components/Result.js","components/Footer.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Form","props","react_default","a","createElement","Fragment","value","className","src","logo","alt","type","placeholder","onChange","change","Result","_props$weather","weather","error","city","date","time","sunrise","sunset","temp","pressure","wind","weatherMain","content","sunriseTime","Date","toLocaleTimeString","sunsetTime","renderWeatherInfoLangPL","toFixed","renderWeatherIcon","length","Footer","href","target","getFullYear","App","state","weatherDesc","handleInputChange","e","_this","setState","prevProps","prevState","_this2","this","API","concat","fetch","then","response","ok","Error","json","data","console","log","toLocaleDateString","sys","main","speed","description","catch","src_components_Result","src_components_Form","src_components_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,iUCyBzBC,EArBF,SAAAC,GACT,OACIC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACKJ,EAAMK,MAAQ,KACXJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,QACXL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,WAAWC,IAAKC,IAAMC,IAAI,SACzCR,EAAAC,EAAAC,cAAA,2BAGRF,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAAA,SACIO,KAAK,OACLL,MAAOL,EAAMK,MACbM,YAAY,eACZC,SAAUZ,EAAMa,YCiDrBC,eA/DA,SAAAd,GAAS,IAAAe,EAEhBf,EAAMgB,QADFC,EADYF,EACZE,MAAOC,EADKH,EACLG,KAAMC,EADDJ,EACCI,KAAMC,EADPL,EACOK,KAAMC,EADbN,EACaM,QAASC,EADtBP,EACsBO,OAAQC,EAD9BR,EAC8BQ,KAAMC,EADpCT,EACoCS,SAAUC,EAD9CV,EAC8CU,KAAMC,EADpDX,EACoDW,YAyBpEC,EAAU,KAEd,IAAKV,GAASC,EAAM,CAEhB,IAAMU,EAAc,IAAIC,KAAe,IAAVR,GAAgBS,qBACvCC,EAAa,IAAIF,KAAc,IAATP,GAAeQ,qBAC3CH,EACI1B,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACIH,EAAAC,EAAAC,cAAA,OAAKG,UAAU,wBACXL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,mBACXL,EAAAC,EAAAC,cAAA,UAAKiB,GACLnB,EAAAC,EAAAC,cAAA,UAAKe,GACLjB,EAAAC,EAAAC,cAAA,UAvBY,WAC5B,OAAQuB,GACJ,IAAK,QAAS,MAAO,kBACrB,IAAK,SAAU,MAAO,YACtB,IAAK,OAAQ,MAAO,SACpB,IAAK,eAAgB,MAAO,QAC5B,IAAK,OAAQ,MAAO,aACpB,QAAS,MAAO,mBAgBCM,KAET/B,EAAAC,EAAAC,cAAA,OAAKG,UAAU,sBACXL,EAAAC,EAAAC,cAAA,UAAKoB,EAAKU,UAAV,UACAhC,EAAAC,EAAAC,cAAA,sBAAcgB,GACdlB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,yCAAoByB,GACpB3B,EAAAC,EAAAC,cAAA,yCAAoB4B,GACpB9B,EAAAC,EAAAC,cAAA,6BAAgBqB,EAAhB,QACAvB,EAAAC,EAAAC,cAAA,+BAAkBsB,EAAlB,UAGRxB,EAAAC,EAAAC,cAAA,OAAKG,UA9CK,WACtB,OAAQoB,GACJ,IAAK,QAAS,MAAO,QACrB,IAAK,SAAU,MAAO,SACtB,IAAK,OAAQ,MAAO,QACpB,IAAK,eAAgB,MAAO,SAC5B,IAAK,OAAQ,MAAO,QACpB,QAAS,MAAO,SAuCQQ,OAMhC,OACIjC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACKa,EAASC,EAAKiB,QAAU,EAAI,GAAKlC,EAAAC,EAAAC,cAAA,MAAIG,UAAU,SAAd,yBAA6CY,EAA7C,mBAAgES,KCnD/FS,SARA,WACX,OACInC,EAAAC,EAAAC,cAAA,cACIF,EAAAC,EAAAC,cAAA,sBAAaF,EAAAC,EAAAC,cAAA,sBAAb,UAAmCF,EAAAC,EAAAC,cAAA,KAAGkC,KAAK,uBAAuBC,OAAO,SAAtC,aAA2D,IAAIT,MAAOU,kBC6FtGC,oNAxFXC,MAAQ,CACJpC,MAAO,GACPc,KAAM,GACND,KAAM,GACNG,QAAS,GACTC,OAAQ,GACRC,KAAM,GACNC,SAAU,GACVC,KAAM,GACNR,MAAO,GACPS,YAAa,GACbgB,YAAa,MAIjBC,kBAAoB,SAAAC,GAChBC,EAAKC,SAAS,CACVzC,MAAOuC,EAAEN,OAAOjC,2FAIL0C,EAAWC,GAAW,IAAAC,EAAAC,KACrC,GAAgC,IAA5BA,KAAKT,MAAMpC,MAAM8B,QACjBa,EAAU3C,QAAU6C,KAAKT,MAAMpC,MAAO,CAEtC,IACM8C,EAAG,oDAAAC,OAAuDF,KAAKT,MAAMpC,MAAlE,WAAA+C,OADM,mCACN,iBAGTC,MAAMF,GACDG,KAAK,SAAAC,GACF,GAAIA,EAASC,GACT,OAAOD,EAEX,MAAME,MAAM,+DAEfH,KAAK,SAAAC,GAAQ,OAAIA,EAASG,SAC1BJ,KAAK,SAAAK,GACFC,QAAQC,IAAIF,GACZ,IAAMxC,GAAO,IAAIU,MAAOiC,qBAClB1C,GAAO,IAAIS,MAAOC,qBAClBZ,EAAO+B,EAAKR,MAAMpC,MACxB4C,EAAKH,SAAS,CACV7B,OAAO,EACPE,OACAC,OACAF,OACAG,QAASsC,EAAKI,IAAI1C,QAClBC,OAAQqC,EAAKI,IAAIzC,OACjBC,KAAMoC,EAAKK,KAAKzC,KAChBC,SAAUmC,EAAKK,KAAKxC,SACpBC,KAAMkC,EAAKlC,KAAKwC,MAChBvC,YAAaiC,EAAK3C,QAAQ,GAAGgD,KAC7BtB,YAAaiB,EAAK3C,QAAQ,GAAGkD,gBAGpCC,MAAM,SAAAlD,GACH2C,QAAQC,IAAI5C,GACZgC,EAAKH,SAAS,SAAAE,GAAS,MAAK,CACxB/B,OAAO,EACPC,KAAM8B,EAAU3C,6CAOhC,OAASJ,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KAELH,EAAAC,EAAAC,cACAiE,EADA,CACOpD,QACHkC,KAAKT,QAJJ,IAMFxC,EAAAC,EAAAC,cACHkE,EADG,CACExD,OACDqC,KAAKP,kBAETtC,MACI6C,KAAKT,MAAMpC,QAXV,IAaFJ,EAAAC,EAAAC,cACHmE,EADG,cAjFGC,cCEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7E,EAAAC,EAAAC,cAAC4E,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9B,KAAK,SAAA+B,GACjCA,EAAaC","file":"static/js/main.6b8deec6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.0b99b5a2.png\";","import React from 'react';\r\nimport './Form.css';\r\nimport logo from '../images/logo.png';\r\n\r\nconst Form = props => {\r\n    return (\r\n        <>\r\n            {props.value ? null :\r\n                <div className='logo'>\r\n                    <img className='logoIcon' src={logo} alt=\"logo\" />\r\n                    <div>Weather app</div>\r\n                </div>\r\n            }\r\n            <form>\r\n                <input\r\n                    type=\"text\"\r\n                    value={props.value}\r\n                    placeholder=\"Wpisz miasto\"\r\n                    onChange={props.change}\r\n                />\r\n            </form>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Form;","import React from 'react';\r\nimport './weatherIcon.css';\r\nimport './Result.css';\r\n\r\nconst Result = props => {\r\n    const { error, city, date, time, sunrise, sunset, temp, pressure, wind, weatherMain\r\n    } = props.weather;\r\n\r\n    const renderWeatherIcon = () => {\r\n        switch (weatherMain) {\r\n            case \"Clear\": return \"sunny\";\r\n            case \"Clouds\": return \"cloudy\";\r\n            case \"Rain\": return \"rainy\";\r\n            case \"Thunderstorm\": return \"stormy\";\r\n            case \"Snow\": return \"snowy\";\r\n            default: return \"clear\"\r\n        }\r\n    }\r\n\r\n    const renderWeatherInfoLangPL = () => {\r\n        switch (weatherMain) {\r\n            case \"Clear\": return \"S≈Çonecznie\";\r\n            case \"Clouds\": return \"Pochmurno\";\r\n            case \"Rain\": return \"Deszcz\";\r\n            case \"Thunderstorm\": return \"Burza\";\r\n            case \"Snow\": return \"≈önieg\";\r\n            default: return \"S≈Çonecznie\"\r\n        }\r\n    }\r\n\r\n    let content = null;\r\n\r\n    if (!error && city) {\r\n\r\n        const sunriseTime = new Date(sunrise * 1000).toLocaleTimeString();\r\n        const sunsetTime = new Date(sunset * 1000).toLocaleTimeString();\r\n        content = (\r\n            <>\r\n                <div className='weatherInfoContainer'>\r\n                    <div className='weatherInfoCity'>\r\n                        <h4>{time}</h4>\r\n                        <h2>{city}</h2>\r\n                        <h4>{renderWeatherInfoLangPL()}</h4>\r\n                    </div>\r\n                    <div className='weatherInfoDetails'>\r\n                        <h2>{temp.toFixed()} &#176;C</h2>\r\n                        <h5>Dzisiaj, {date}</h5>\r\n                        <div>\r\n                            <h4>Wsch√≥d s≈Ço≈Ñca: {sunriseTime}</h4>\r\n                            <h4>Zach√≥d s≈Ço≈Ñca: {sunsetTime}</h4>\r\n                            <h4>Ci≈õnienie: {pressure} hPa</h4>\r\n                            <h4>Si≈Ça wiatru: {wind} m/s</h4>\r\n                        </div>\r\n                    </div>\r\n                    <div className={renderWeatherIcon()} />\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {error ? (city.length <= 1 ? '' : <h4 className='error'>Nie znaleziono miasta {city}...üò¢</h4>) : content}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Result;","import React from 'react';\r\nimport './Footer.css'\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <footer>\r\n            <p>Made with <span>‚ù§</span> in{` `}<a href=\"https://reactjs.org/\" target=\"blank\">ReactJS </a>{new Date().getFullYear()}</p>\r\n        </footer>\r\n    );\r\n}\r\n\r\nexport default Footer;","import React, {\r\n    Component\r\n} from 'react';\r\nimport Form from './Form';\r\nimport Result from './Result';\r\nimport Footer from './Footer';\r\nimport './App.css';\r\n\r\n\r\n\r\nclass App extends Component {\r\n    state = {\r\n        value: \"\",\r\n        date: \"\",\r\n        city: \"\",\r\n        sunrise: \"\",\r\n        sunset: \"\",\r\n        temp: \"\",\r\n        pressure: \"\",\r\n        wind: \"\",\r\n        error: \"\",\r\n        weatherMain: \"\",\r\n        weatherDesc: \"\"\r\n    }\r\n\r\n\r\n    handleInputChange = e => {\r\n        this.setState({\r\n            value: e.target.value\r\n        })\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (this.state.value.length === 0) return\r\n        if (prevState.value !== this.state.value) {\r\n\r\n            const APIKey = 'a414734d1e27f16a92ff5009b0a579e3';\r\n            const API = `http://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&APPID=${APIKey}&units=metric`;\r\n\r\n\r\n            fetch(API)\r\n                .then(response => {\r\n                    if (response.ok) {\r\n                        return response\r\n                    }\r\n                    throw Error('Niestety takie miasto nie istnieje w naszej bazie danych.')\r\n                })\r\n                .then(response => response.json())\r\n                .then(data => {\r\n                    console.log(data)\r\n                    const date = new Date().toLocaleDateString();\r\n                    const time = new Date().toLocaleTimeString();\r\n                    const city = this.state.value;\r\n                    this.setState({\r\n                        error: false,\r\n                        date,\r\n                        time,\r\n                        city,\r\n                        sunrise: data.sys.sunrise,\r\n                        sunset: data.sys.sunset,\r\n                        temp: data.main.temp,\r\n                        pressure: data.main.pressure,\r\n                        wind: data.wind.speed,\r\n                        weatherMain: data.weather[0].main,\r\n                        weatherDesc: data.weather[0].description,\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    console.log(error);\r\n                    this.setState(prevState => ({\r\n                        error: true,\r\n                        city: prevState.value\r\n                    }))\r\n                })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return ( <\r\n            >\r\n            <\r\n            Result weather = {\r\n                this.state\r\n            }\r\n            /> <\r\n            Form change = {\r\n                this.handleInputChange\r\n            }\r\n            value = {\r\n                this.state.value\r\n            }\r\n            /> <\r\n            Footer / >\r\n            <\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}